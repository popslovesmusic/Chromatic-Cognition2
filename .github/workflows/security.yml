# Security Scanning Workflow - Feature 024 (FR-012, FR-013, FR-014)
#
# Runs SAST, DAST, dependency scanning, SBOM generation, and artifact signing

name: Security Scan

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # For uploading to GitHub Security tab
  id-token: write  # For cosign signing

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # SAST: Static Application Security Testing
  sast-python:
    name: SAST - Python (Bandit, Semgrep)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Bandit
        run: pip install bandit[toml]

      - name: Run Bandit SAST
        run: |
          bandit -r server/ -f json -o bandit-report.json || true
          bandit -r server/ -f txt
        continue-on-error: true

      - name: Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/jwt
            p/sql-injection
        continue-on-error: true

      - name: Upload SAST Results
        uses: actions/upload-artifact@v4
        with:
          name: sast-python-results
          path: |
            bandit-report.json
            semgrep-results.json

  sast-javascript:
    name: SAST - JavaScript (ESLint Security)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Dependencies
        run: |
          npm install -g eslint
          npm install -g eslint-plugin-security

      - name: Run ESLint Security
        run: |
          eslint . --ext .js,.jsx,.ts,.tsx \
            --plugin security \
            --format json \
            --output-file eslint-security.json || true
        continue-on-error: true

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: sast-javascript-results
          path: eslint-security.json

  # Dependency Scanning
  dependency-scan-python:
    name: Dependency Scan - Python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          pip install pip-audit safety

      - name: Run pip-audit
        run: pip-audit --format json --output pip-audit.json || true
        continue-on-error: true

      - name: Run Safety Check
        run: |
          pip freeze | safety check --stdin \
            --json --output safety-report.json || true
        continue-on-error: true

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-python
          path: |
            pip-audit.json
            safety-report.json

  dependency-scan-npm:
    name: Dependency Scan - NPM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: NPM Audit
        run: npm audit --json > npm-audit.json || true
        continue-on-error: true

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-npm
          path: npm-audit.json

  # Container Scanning
  container-scan:
    name: Container Image Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t soundlab:test .

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: soundlab:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scan
        run: |
          docker scan soundlab:test \
            --json --file Dockerfile > docker-scan.json || true
        continue-on-error: true

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            docker-scan.json

  # DAST: Dynamic Application Security Testing
  dast-zap:
    name: DAST - OWASP ZAP Baseline
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Start Application
        run: |
          docker-compose up -d
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: dast-zap-results
          path: report_html.html

  # SBOM Generation (FR-013)
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate Python SBOM
        run: |
          syft dir:./server -o spdx-json > sbom-python.spdx.json
          syft dir:./server -o cyclonedx-json > sbom-python.cyclonedx.json

      - name: Generate Container SBOM
        run: |
          docker build -t soundlab:sbom .
          syft soundlab:sbom -o spdx-json > sbom-container.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-*.json

  # License Scanning (FR-013)
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install License Checker
        run: pip install pip-licenses

      - name: Check Python Licenses
        run: |
          pip-licenses --format=json --output-file=licenses-python.json
          pip-licenses --format=markdown --output-file=licenses-python.md

      - name: License Compliance Check
        run: |
          python scripts/license_check.py \
            --licenses licenses-python.json \
            --allowlist config/license-allowlist.txt \
            --report license-compliance.json

      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses-*.json
            licenses-*.md
            license-compliance.json

  # Artifact Signing (FR-014)
  sign-artifacts:
    name: Sign Artifacts with Cosign
    runs-on: ubuntu-latest
    needs: [sbom-generation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom

      - name: Sign SBOM with Cosign
        run: |
          cosign sign-blob --yes \
            sbom-container.spdx.json \
            --output-signature sbom-container.spdx.json.sig \
            --output-certificate sbom-container.spdx.json.pem
        env:
          COSIGN_EXPERIMENTAL: "true"

      - name: Build and Sign Container Image
        run: |
          docker build -t soundlab:${{ github.sha }} .
          docker tag soundlab:${{ github.sha }} soundlab:latest

          # Sign image
          cosign sign --yes soundlab:${{ github.sha }}
        env:
          COSIGN_EXPERIMENTAL: "true"

      - name: Generate Provenance (SLSA)
        run: |
          echo "{
            \"buildType\": \"https://github.com/soundlab/phi-matrix@v1\",
            \"builder\": { \"id\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\" },
            \"metadata\": {
              \"buildInvocationId\": \"${{ github.run_id }}\",
              \"buildStartedOn\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"completeness\": { \"parameters\": true, \"environment\": true }
            }
          }" > provenance.json

      - name: Upload Signed Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts
          path: |
            *.sig
            *.pem
            provenance.json

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast-python, sast-javascript, dependency-scan-python, dependency-scan-npm, container-scan, license-scan]

    steps:
      - uses: actions/checkout@v4

      - name: Download All Results
        uses: actions/download-artifact@v4

      - name: Generate Security Summary
        run: |
          python scripts/security_summary.py \
            --sast sast-*-results/ \
            --deps dependency-scan-*/ \
            --container container-scan-results/ \
            --licenses license-reports/ \
            --output security-summary.json

      - name: Check Security Thresholds (SC-003)
        run: |
          python scripts/check_security_thresholds.py \
            --summary security-summary.json \
            --max-critical 0 \
            --max-high 0

      - name: Upload Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.json

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));

            const comment = `## 🔒 Security Scan Results

            | Category | Critical | High | Medium | Low |
            |----------|----------|------|--------|-----|
            | SAST | ${summary.sast.critical} | ${summary.sast.high} | ${summary.sast.medium} | ${summary.sast.low} |
            | Dependencies | ${summary.deps.critical} | ${summary.deps.high} | ${summary.deps.medium} | ${summary.deps.low} |
            | Container | ${summary.container.critical} | ${summary.container.high} | ${summary.container.medium} | ${summary.container.low} |

            **Status**: ${summary.passed ? '✅ PASSED' : '❌ FAILED'}

            [View detailed results](${context.payload.pull_request.html_url}/checks)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
