name: Maintenance

# Weekly maintenance automation for Soundlab + D-ASE
# Feature 026 (FR-002): Automated checks, security scans, and issue triage

on:
  schedule:
    # Run every Monday at 02:00 UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - maintenance/**

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  # Job 1: Code Quality Checks
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install flake8 black mypy bandit safety

      - name: Run linter (flake8)
        run: |
          cd server
          flake8 --max-line-length=120 --exclude=__pycache__,.venv,venv --format=json --output-file=../flake8-report.json . || true

      - name: Run formatter check (black)
        run: |
          cd server
          black --line-length=120 --check . || echo "::warning::Code formatting issues detected"

      - name: Run type checker (mypy)
        run: |
          cd server
          mypy --ignore-missing-imports . || echo "::warning::Type checking issues detected"

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            flake8-report.json
          retention-days: 30

  # Job 2: Security Scans
  security-scans:
    name: Security & Vulnerability Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install safety bandit pip-audit

      - name: Run SAST (Bandit)
        run: |
          bandit -r server/ -f json -o bandit-report.json || true

      - name: Run dependency security check (Safety)
        run: |
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit --format json --output pip-audit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
          retention-days: 90

      - name: Create security issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Maintenance] Security vulnerabilities detected',
              body: 'Automated maintenance scan detected security vulnerabilities.\n\nCheck the workflow run for details:\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              labels: ['security', 'maintenance', 'automated']
            });

  # Job 3: Test Suite
  test-suite:
    name: Regression & Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-timeout

      - name: Run test suite
        run: |
          cd server
          SOUNDLAB_SIMULATE=1 pytest -v --tb=short --timeout=60 --cov=. --cov-report=json --cov-report=term

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: server/coverage.json
          retention-days: 30

      - name: Create issue if tests fail
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '[Maintenance] Test failures on Python ${{ matrix.python-version }}',
              body: 'Automated test suite failed for Python ${{ matrix.python-version }}.\n\nWorkflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              labels: ['bug', 'maintenance', 'testing', 'automated']
            });

  # Job 4: Regression Testing
  regression-tests:
    name: Performance & Regression Checks
    runs-on: ubuntu-latest
    needs: test-suite
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r server/requirements.txt
          pip install pytest

      - name: Run regression tests
        run: |
          pytest tests/regression/ -v --tb=short || echo "::warning::Regression tests not yet implemented"

      - name: Check performance benchmarks
        run: |
          python scripts/check_benchmarks.py || echo "::warning::Benchmark comparison not yet available"

  # Job 5: Documentation Sync
  docs-sync:
    name: Documentation Build & Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check documentation files
        run: |
          required_docs=(
            "README.md"
            "CHANGELOG.md"
            "RELEASE_NOTES.md"
            "CONTRIBUTING.md"
            "docs/roadmap_v1.1.md"
            "docs/versioning_policy.md"
            "docs/PRIVACY.md"
            "docs/threat_model.md"
            "docs/incident_response.md"
            "docs/hardware_integration.md"
          )

          missing_docs=()
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              missing_docs+=("$doc")
              echo "::warning::Missing documentation: $doc"
            fi
          done

          if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "Missing ${#missing_docs[@]} required documentation files"
            exit 1
          fi

      - name: Validate markdown syntax
        run: |
          find docs -name "*.md" -type f | while read file; do
            echo "Checking $file"
            # Basic validation - check for common issues
            if grep -q $'\t' "$file"; then
              echo "::warning file=$file::Contains tabs instead of spaces"
            fi
          done

      - name: Check for broken links
        run: |
          echo "::notice::Link checking would run here with markdown-link-check or similar"

  # Job 6: Dependency Updates
  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Check for outdated packages
        run: |
          python -m pip install --upgrade pip
          pip install pip-check pip-audit
          pip list --outdated --format=json > outdated-packages.json || true
          cat outdated-packages.json

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-updates
          path: outdated-packages.json
          retention-days: 30

      - name: Create issue for major updates
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let outdated = [];
            try {
              outdated = JSON.parse(fs.readFileSync('outdated-packages.json', 'utf8'));
            } catch (e) {
              console.log('No outdated packages file or parse error');
              return;
            }

            if (outdated.length > 10) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '[Maintenance] Dependency updates available',
                body: `${outdated.length} packages have updates available.\n\nReview the maintenance workflow artifacts for details.`,
                labels: ['dependencies', 'maintenance', 'automated']
              });
            }

  # Job 7: Cleanup & Reporting
  reporting:
    name: Generate Maintenance Report
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scans, test-suite, regression-tests, docs-sync, dependency-updates]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: maintenance-reports

      - name: Generate summary report
        run: |
          cat << EOF > maintenance-summary.md
          # Maintenance Report - $(date -u +"%Y-%m-%d")

          ## Workflow Run
          - **Run ID**: ${{ github.run_id }}
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref }}

          ## Job Status
          - Quality Checks: ${{ needs.quality-checks.result }}
          - Security Scans: ${{ needs.security-scans.result }}
          - Test Suite: ${{ needs.test-suite.result }}
          - Regression Tests: ${{ needs.regression-tests.result }}
          - Docs Sync: ${{ needs.docs-sync.result }}
          - Dependency Updates: ${{ needs.dependency-updates.result }}

          ## Artifacts
          Check the workflow run for detailed reports:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ---
          Generated by Feature 026 maintenance automation
          EOF

          cat maintenance-summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary
          path: maintenance-summary.md
          retention-days: 90

      - name: Post summary as comment (if on PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('maintenance-summary.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
